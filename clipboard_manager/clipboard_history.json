[
  {
    "id": 1,
    "content": "pip install -r requirements.txt",
    "pinned": false,
    "timestamp": "2025-10-09 11:57:26.972941"
  },
  {
    "id": 2,
    "content": "pyperclip==1.9.1\r\ntabulate==0.9.0",
    "pinned": true,
    "timestamp": "2025-10-09 11:57:54.433333"
  },
  {
    "id": 3,
    "content": "import pyperclip\r\nimport json\r\nimport os\r\nfrom datetime import datetime\r\nfrom tabulate import tabulate\r\nfrom colorama import init, Fore, Style\r\n\r\ninit(autoreset=True)\r\n\r\nDB_FILE = \"clipboard_history.json\"\r\n\r\n# Load history from JSON\r\ndef load_history():\r\n    if os.path.exists(DB_FILE):\r\n        with open(DB_FILE, \"r\") as f:\r\n            return json.load(f)\r\n    return []\r\n\r\n# Save history to JSON\r\ndef save_history(history):\r\n    with open(DB_FILE, \"w\") as f:\r\n        json.dump(history, f, indent=2)\r\n\r\n# Add current clipboard content\r\ndef add_item():\r\n    content = pyperclip.paste().strip()\r\n    if not content:\r\n        print(Fore.YELLOW + \"Clipboard is empty. Nothing to add.\")\r\n        return\r\n    history = load_history()\r\n    history.append({\r\n        \"id\": len(history) + 1,\r\n        \"content\": content,\r\n        \"pinned\": False,\r\n        \"timestamp\": str(datetime.now())\r\n    })\r\n    save_history(history)\r\n    pyperclip.copy(content)\r\n    print(Fore.GREEN + \"Clipboard content saved and ready to use!\")\r\n\r\n# List all items\r\ndef list_items(items=None):\r\n    history = items if items is not None else load_history()\r\n    if not history:\r\n        print(Fore.YELLOW + \"No clipboard history found.\")\r\n        return\r\n    # Sort pinned items first\r\n    history = sorted(history, key=lambda x: not x[\"pinned\"])\r\n    table = [\r\n        [item[\"id\"], (\"\ud83d\udccc \" if item[\"pinned\"] else \"\") + item[\"content\"][:40], item[\"timestamp\"]]\r\n        for item in history\r\n    ]\r\n    print(tabulate(table, headers=[\"ID\", \"Content\", \"Timestamp\"]))\r\n\r\n# Copy item back to clipboard\r\ndef copy_item():\r\n    list_items()\r\n    try:\r\n        item_id = int(input(\"Enter the ID of the item to copy: \"))\r\n        history = load_history()\r\n        item = next((i for i in history if i[\"id\"] == item_id), None)\r\n        if item:\r\n            pyperclip.copy(item[\"content\"])\r\n            print(Fore.GREEN + \"Item copied to clipboard!\")\r\n        else:\r\n            print(Fore.RED + \"Invalid ID.\")\r\n    except ValueError:\r\n        print(Fore.RED + \"Please enter a valid number.\")\r\n\r\n# Search items\r\ndef search_items():\r\n    keyword = input(\"Enter keyword to search: \").strip().lower()\r\n    history = load_history()\r\n    results = [i for i in history if keyword in i[\"content\"].lower()]\r\n    if not results:\r\n        print(Fore.YELLOW + \"No items found.\")\r\n        return\r\n    # Highlight keyword in content\r\n    table = [\r\n        [\r\n            item[\"id\"],\r\n            item[\"content\"].replace(keyword, Fore.RED + keyword + Style.RESET_ALL)[:40],\r\n            (\"\ud83d\udccc \" if item[\"pinned\"] else \"\") + item[\"timestamp\"]\r\n        ]\r\n        for item in results\r\n    ]\r\n    print(tabulate(table, headers=[\"ID\", \"Content\", \"Timestamp\"]))\r\n\r\n# Delete an item\r\ndef delete_item():\r\n    list_items()\r\n    try:\r\n        item_id = int(input(\"Enter the ID of the item to delete: \"))\r\n        history = load_history()\r\n        item = next((i for i in history if i[\"id\"] == item_id), None)\r\n        if not item:\r\n            print(Fore.RED + \"Invalid ID.\")\r\n            return\r\n        confirm = input(\"Are you sure you want to delete this item? (y/n): \")\r\n        if confirm.lower() == \"y\":\r\n            history = [i for i in history if i[\"id\"] != item_id]\r\n            for idx, item in enumerate(history):\r\n                item[\"id\"] = idx + 1\r\n            save_history(history)\r\n            print(Fore.GREEN + \"Item deleted.\")\r\n        else:\r\n            print(Fore.YELLOW + \"Deletion cancelled.\")\r\n    except ValueError:\r\n        print(Fore.RED + \"Please enter a valid number.\")\r\n\r\n# Clear all items\r\ndef clear_history():\r\n    confirm = input(\"Are you sure you want to clear all history? (y/n): \")\r\n    if confirm.lower() == \"y\":\r\n        save_history([])\r\n        print(Fore.GREEN + \"All history cleared!\")\r\n    else:\r\n        print(Fore.YELLOW + \"Clear history cancelled.\")\r\n\r\n# Pin/unpin items\r\ndef toggle_pin():\r\n    list_items()\r\n    try:\r\n        item_id = int(input(\"Enter the ID of the item to pin/unpin: \"))\r\n        history = load_history()\r\n        item = next((i for i in history if i[\"id\"] == item_id), None)\r\n        if item:\r\n            item[\"pinned\"] = not item[\"pinned\"]\r\n            save_history(history)\r\n            status = \"pinned\" if item[\"pinned\"] else \"unpinned\"\r\n            print(Fore.GREEN + f\"Item {status}.\")\r\n        else:\r\n            print(Fore.RED + \"Invalid ID.\")\r\n    except ValueError:\r\n        print(Fore.RED + \"Please enter a valid number.\")\r\n\r\n# Main menu\r\ndef main():\r\n    while True:\r\n        print(\"\\n=== Clipboard Manager ===\")\r\n        print(\"1. Add current clipboard\")\r\n        print(\"2. List history\")\r\n        print(\"3. Copy item to clipboard\")\r\n        print(\"4. Search items\")\r\n        print(\"5. Delete item\")\r\n        print(\"6. Clear all history\")\r\n        print(\"7. Pin/Unpin item\")\r\n        print(\"0. Exit\")\r\n        choice = input(\"Choose an option: \")\r\n\r\n        if choice == \"1\":\r\n            add_item()\r\n        elif choice == \"2\":\r\n            list_items()\r\n        elif choice == \"3\":\r\n            copy_item()\r\n        elif choice == \"4\":\r\n            search_items()\r\n        elif choice == \"5\":\r\n            delete_item()\r\n        elif choice == \"6\":\r\n            clear_history()\r\n        elif choice == \"7\":\r\n            toggle_pin()\r\n        elif choice == \"0\":\r\n            print(Fore.CYAN + \"Goodbye!\")\r\n            break\r\n        else:\r\n            print(Fore.RED + \"Invalid option. Try again.\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()",
    "pinned": false,
    "timestamp": "2025-10-09 12:00:45.394900"
  }
]